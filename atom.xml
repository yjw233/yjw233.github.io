<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yjw233.github.io</id>
    <title>Jev</title>
    <updated>2022-06-20T10:40:31.609Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yjw233.github.io"/>
    <link rel="self" href="https://yjw233.github.io/atom.xml"/>
    <subtitle>不积跬步，无以至千里</subtitle>
    <logo>https://yjw233.github.io/images/avatar.png</logo>
    <icon>https://yjw233.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Jev</rights>
    <entry>
        <title type="html"><![CDATA[k8s secret]]></title>
        <id>https://yjw233.github.io/post/k8s-secret/</id>
        <link href="https://yjw233.github.io/post/k8s-secret/">
        </link>
        <updated>2022-06-15T16:35:27.000Z</updated>
        <content type="html"><![CDATA[<p>kubectl get secret -n titanium regcred -o jsonpath='{.data.*}'| base64 -d<br>
kubectl get secret -n titanium default-token-dqpqz -o yaml</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git命令]]></title>
        <id>https://yjw233.github.io/post/git-ming-ling/</id>
        <link href="https://yjw233.github.io/post/git-ming-ling/">
        </link>
        <updated>2022-05-23T08:58:58.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>查看远程仓库<br>
$ git remote -v</li>
<li>从远程获取最新版本到本地<br>
$ git fetch origin master</li>
<li>比较本地的仓库和远程参考的区别<br>
$ git log -p master.. origin/master</li>
<li>把远程下载下来的代码合并到本地仓库，远程的和本地的合并<br>
$ git merge origin/master</li>
</ol>
<p>查看修改的状态<br>
git status<br>
指定commit包含的文件<br>
git add<br>
完成一次本地commit<br>
git commit -a -m  &quot;&quot;</p>
<p>参考 https://blog.csdn.net/qcmc123/article/details/119612411</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GNU nano使用]]></title>
        <id>https://yjw233.github.io/post/gnu-nano-shi-yong/</id>
        <link href="https://yjw233.github.io/post/gnu-nano-shi-yong/">
        </link>
        <updated>2022-05-16T14:40:25.000Z</updated>
        <content type="html"><![CDATA[<p>Ctrl+S 保存你的工作<br>
Ctrl+W 另存为<br>
Ctrl+R 加载文件（读取）<br>
Ctrl+X 退出<br>
Ctrl+G 获得帮助<br>
Alt+A 选择（标记）一个区域<br>
Ctrl+K 剪切标记的文字<br>
Ctrl+U 粘贴（不剪切）<br>
Alt+F 撤销<br>
Alt+E 重做<br>
Ctrl+G 获取帮助</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生成证书]]></title>
        <id>https://yjw233.github.io/post/sheng-cheng-zheng-shu/</id>
        <link href="https://yjw233.github.io/post/sheng-cheng-zheng-shu/">
        </link>
        <updated>2022-05-14T18:00:12.000Z</updated>
        <content type="html"><![CDATA[<p>openssl genrsa -out Root_CA_1.key 2048<br>
openssl req -new -key Root_CA_1.key -out Root_CA_1.csr -utf8<br>
openssl x509 -req -days 3650 -in Root_CA_1.csr -signkey Root_CA_1.key -out Root_CA_1.cer</p>
<p>openssl genrsa -out Sub-CA_3.key 2048<br>
openssl req -new -key Sub-CA_3.key -out Sub-CA_3.csr -utf8<br>
openssl x509 -req  -CA Root_CA_1.cer -CAkey Root_CA_1.key -days 3650 -in Sub-CA_3.csr -out Sub-CA_3.cer -sha1 -CAserial Root_CA_1.srl -CAcreateserial</p>
<p>openssl genrsa -out UE_A.key 2048<br>
openssl req -new -key UE_A.key -out UE_A.csr -utf8<br>
openssl x509 -req  -CA Sub-CA_3.cer -CAkey Sub-CA_3.key -days 3650 -in UE_A.csr -out UE_A.cer -sha1 -CAserial Sub-CA_3.srl -CAcreateserial -extensions v3_req</p>
<p>https://blog.csdn.net/AAugust/article/details/102680169</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[毕设]]></title>
        <id>https://yjw233.github.io/post/bi-she/</id>
        <link href="https://yjw233.github.io/post/bi-she/">
        </link>
        <updated>2022-05-13T14:25:18.000Z</updated>
        <content type="html"><![CDATA[<p>cd implementation<br>
ganache-cli --allowUnlimitedContractSize -l 90000000 -d</p>
<p>Second window:<br>
cd implementation<br>
truffle console</p>
<blockquote>
<p>migrate --reset<br>
exec set_root.js<br>
exec set_intermediate.js<br>
exec set_EE.js<br>
exec get_status.js</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[restservice配置]]></title>
        <id>https://yjw233.github.io/post/restservice-pei-zhi/</id>
        <link href="https://yjw233.github.io/post/restservice-pei-zhi/">
        </link>
        <updated>2022-05-10T03:22:00.000Z</updated>
        <content type="html"><![CDATA[<p>'''shell<br>
git clone  https://github.com/WeBankBlockchain/WeIdentity-Rest-Service.git</p>
<p>'''</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建验证cpt]]></title>
        <id>https://yjw233.github.io/post/chuang-jian-yan-zheng-cpt/</id>
        <link href="https://yjw233.github.io/post/chuang-jian-yan-zheng-cpt/">
        </link>
        <updated>2022-04-23T10:32:01.000Z</updated>
        <content type="html"><![CDATA[<p>{<br>
&quot;functionArg&quot;: {<br>
&quot;cptId&quot;: 2000000,<br>
&quot;issuer&quot;: &quot;did:weid:0xcefbd444b2c0f441ff0e3cb774a48a6d68cc6df2&quot;,<br>
&quot;expirationDate&quot;: &quot;2119-04-18T21:12:33Z&quot;,<br>
&quot;claim&quot;: {<br>
&quot;name&quot;: &quot;zhang san&quot;,<br>
&quot;gender&quot;: &quot;F&quot;,<br>
&quot;age&quot;: 18<br>
}<br>
},<br>
&quot;transactionArg&quot;: {<br>
&quot;invokerWeId&quot;: &quot;did:weid:0xcefbd444b2c0f441ff0e3cb774a48a6d68cc6df2&quot;<br>
},<br>
&quot;functionName&quot;: &quot;createCredential&quot;,<br>
&quot;v&quot;: &quot;1.0.0&quot;<br>
}<br>
输出<br>
{<br>
&quot;respBody&quot;: {<br>
&quot;@context&quot;: &quot;https://github.com/WeBankFinTech/WeIdentity/blob/master/context/v1&quot;,<br>
&quot;claim&quot;: {<br>
&quot;age&quot;: 18,<br>
&quot;gender&quot;: &quot;F&quot;,<br>
&quot;name&quot;: &quot;zhang san&quot;<br>
},<br>
&quot;cptId&quot;: 2000000,<br>
&quot;expirationDate&quot;: &quot;2119-04-18T21:12:33Z&quot;,<br>
&quot;id&quot;: &quot;ee05ccb4-352e-4c9a-92d0-b9126d6136da&quot;,<br>
&quot;issuanceDate&quot;: &quot;2022-04-23T18:11:58Z&quot;,<br>
&quot;issuer&quot;: &quot;did:weid:0xcefbd444b2c0f441ff0e3cb774a48a6d68cc6df2&quot;,<br>
&quot;proof&quot;: {<br>
&quot;created&quot;: &quot;1650708718000&quot;,<br>
&quot;creator&quot;: &quot;did:weid:0xcefbd444b2c0f441ff0e3cb774a48a6d68cc6df2&quot;,<br>
&quot;signature&quot;: &quot;eOuZj6naG4LWveUgehRJp0vXqECtVx+mUVKVyyHpSrlBB1c3ctij4ghK4vmf3p9FqGXgkLBelUCS1A2sGb3RiwE=&quot;,<br>
&quot;type&quot;: &quot;Secp256k1&quot;<br>
}<br>
},<br>
&quot;loopback&quot;: null,<br>
&quot;errorCode&quot;: 0,<br>
&quot;errorMessage&quot;: &quot;success&quot;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[weidentity启动]]></title>
        <id>https://yjw233.github.io/post/weidentity-qi-dong/</id>
        <link href="https://yjw233.github.io/post/weidentity-qi-dong/">
        </link>
        <updated>2022-04-04T02:38:19.000Z</updated>
        <content type="html"><![CDATA[<p>cd weid-build-tools<br>
./start.sh</p>
<p>restservice<br>
cd WeIdentity-R<br>
cd dist<br>
./start.sh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对象成员（C++）]]></title>
        <id>https://yjw233.github.io/post/dui-xiang-cheng-yuan-c/</id>
        <link href="https://yjw233.github.io/post/dui-xiang-cheng-yuan-c/">
        </link>
        <updated>2021-05-06T12:31:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目描述">题目描述</h1>
<p>设计一个产品类 Product ，允许通过如下方式来创建产品对象： 通过指定产品名创建； 通过指定产品名和产品价格创建； 通过指定产品名、产品价格、出厂日期（对象成员）创建； Product 还应该包含如下属性：生产厂家、易碎标记、有效日期（使用对象成员）、颜色、高度。成员函数包括访问和修改这些属性的操作。 在 main( ) 中定义对象，并输出相关信息。<br>
相关类的定义提示:</p>
<pre><code class="language-c++">class Product
{
       string name;
       double price;
       Date deptime;
       string factory;
       bool easy_break;
       Date valtime; 
       string color;
       double high;
public:
       ........ 
       void output (  ); 
}; 
</code></pre>
<p>输出函数提示 :</p>
<pre><code class="language-c++">void Product::output (  )
{
       cout&lt;&lt;name&lt;&lt;&quot; &quot;&lt;&lt;price&lt;&lt;endl;
       cout&lt;&lt;deptime.Getyear()&lt;&lt;&quot;-&quot;&lt;&lt;deptime.Getmonth()&lt;&lt;&quot;-&quot;&lt;&lt;deptime.Getday()&lt;&lt;endl;
       cout&lt;&lt;factory&lt;&lt;&quot; &quot;&lt;&lt;easy_break&lt;&lt;endl;
       cout&lt;&lt;valtime.Getyear()&lt;&lt;&quot;-&quot;&lt;&lt;valtime.Getmonth()&lt;&lt;&quot;-&quot;&lt;&lt;valtime.Getday()&lt;&lt;endl;
} 
</code></pre>
<p>main（）函数如下，请复制使用</p>
<pre><code class="language-c++">int main()
{
       string  s;
       cin&gt;&gt;s;
       Product p1(&quot;car&quot;);
       Product p2(&quot;glass&quot;,3.00);
       Product p3(&quot;pen&quot;,5.00,2009,3,14);
       p1.SetProduct(&quot;car&quot;,100000.0,2009,3,14,&quot;nanjing&quot;,0,2010,10,14,&quot;red&quot;,1.5);
       p1.output();
       p2.output();
       p3.output();
       return 0;
}
</code></pre>
<p>输入描述</p>
<pre><code class="language-c++">Start
</code></pre>
<p>输出描述</p>
<pre><code class="language-c++">Constrcting One....
Constrcting Two....
Constrcting Three....
car 100000
2009-3-14
nanjing 0
2010-10-14
glass 3
2000-1-1
unnamed 0
2000-1-1
pen 5
2009-3-14
unnamed 0
2000-1-1
</code></pre>
<h1 id="解法">解法</h1>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
class Date{
       
       int year;
       int month;
       int day;
       public:
       
       Date(int y=2000,int m=1,int d=1){year=y;month=m;day=d;}
       int Getyear(){return year;}
       int Getmonth(){return month;}
       int Getday(){return day;}
       void setDate(int y,int m,int d){year=y;month=m;day=d;}
};
class Product
{
       string name;
       double price;
       Date deptime;
       string factory;
       bool easy_break;
       Date valtime; 
       string color;
       double high;
public:
     Product(string n);
      Product(string n,double p);
       Product(string n,double p,int y,int m,int d);
       void SetProduct(string n,double p,int y,int m,int d,string f,bool e,int yy,int mm,int dd,string c,double h);
       void output (  ); 
}; 
 //Product::Product(){name=&quot;unnaned&quot;;price=0;factory=&quot;nanjing&quot;;easy_break=0;color=&quot;&quot;;high=0;}
 Product::Product(string n)
       {
              name=n;price=0;factory=&quot;unnamed&quot;;easy_break=0;color=&quot;&quot;;high=0;
              cout&lt;&lt;&quot;Constrcting One....&quot;&lt;&lt;endl;
       } 
Product::Product(string n,double p)
       {
              name=n;price=p;factory=&quot;unnamed&quot;;easy_break=0;color=&quot;&quot;;high=0;
              cout&lt;&lt;&quot;Constrcting Two....&quot;&lt;&lt;endl;
       } 
Product::Product(string n,double p,int y,int m,int d):deptime(y,m,d)
       {
              name=n;price=p;factory=&quot;unnamed&quot;;easy_break=0;color=&quot;&quot;;high=0;
              cout&lt;&lt;&quot;Constrcting Three....&quot;&lt;&lt;endl;
       } 
void Product::SetProduct(string n,double p,int y,int m,int d,string f,bool e,int yy, int mm,int dd,string c,double h)
       {      name=n;price=p;deptime.setDate(y,m,d);factory=f;easy_break=e;valtime.setDate(yy,mm,dd);color=c;high=h;
       } 
void Product::output (  )
{
       cout&lt;&lt;name&lt;&lt;&quot; &quot;&lt;&lt;price&lt;&lt;endl;
       cout&lt;&lt;deptime.Getyear()&lt;&lt;&quot;-&quot;&lt;&lt;deptime.Getmonth()&lt;&lt;&quot;-&quot;&lt;&lt;deptime.Getday()&lt;&lt;endl;
       cout&lt;&lt;factory&lt;&lt;&quot; &quot;&lt;&lt;easy_break&lt;&lt;endl;
       cout&lt;&lt;valtime.Getyear()&lt;&lt;&quot;-&quot;&lt;&lt;valtime.Getmonth()&lt;&lt;&quot;-&quot;&lt;&lt;valtime.Getday()&lt;&lt;endl;
} 

int main()
{
       string  s;
       cin&gt;&gt;s;
       Product p1(&quot;car&quot;);
       Product p2(&quot;glass&quot;,3.00);
       Product p3(&quot;pen&quot;,5.00,2009,3,14);
       p1.SetProduct(&quot;car&quot;,100000.0,2009,3,14,&quot;nanjing&quot;,0,2010,10,14,&quot;red&quot;,1.5);
       p1.output();
       p2.output();
       p3.output();
       return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[text]]></title>
        <id>https://yjw233.github.io/post/text/</id>
        <link href="https://yjw233.github.io/post/text/">
        </link>
        <updated>2021-05-03T11:15:02.000Z</updated>
        <summary type="html"><![CDATA[<p>#text#</p>
]]></summary>
        <content type="html"><![CDATA[<p>#text#</p>
<!-- more -->
<!-- more -->
]]></content>
    </entry>
</feed>